// import faust standard library
import("stdfaust.lib");
// THIS library
aetest = library("aetest.lib");


// TEST WITH FIXEDS SINE SIGNALS (start at compile time)
FixedOsclists(i) = ba.take(i, frequencies_list), ba.take(i, dB_list), ba.take(i, seconds_list), trigger
with {
    // Sin in Column :  1     2     3     4     5     6     7    8    9
    frequencies_list =  1000, 1000, 1000, 3000, 3000, 3000, 500, 500, 500 ;
    dB_list =           -18,  -18,  -18,  -18,  -18,  -18,  -18, -18, -18 ;
    seconds_list =      2,    5,    10,   2,    5,    10,   2,   5,   10 ;
    trigger = 1;
};
FixedSine(freq, dB, sec, trigger) = signal
with {
    amp = ba.db2linear(dB);
    duration = (trigger - trigger@(ma.SR * sec)) > 0;
    signal = os.osc(freq) * amp * duration;
};
TEST_Osc_fixed(i) = FixedOsclists(i) : FixedSine;
//process = TEST_Osc_fixed(1);
// to mic 1, 2, 3, 4
TEST_Osc_fixedto1234Mics(i) = FixedOsclists(i) : FixedSine : \(m1).(m1, m1, m1, m1);
// to mic 1, 2, 3
TEST_Osc_fixedto123Mics(i) = FixedOsclists(i) : FixedSine : \(m1).(m1, m1, m1, 0);
//process = TEST_Osc_fixedto123Mics(1);


// TEST WITH VARIABLE SINE SIGNAL (start when triggered)
STf = si.smoo( hslider("Sine Freq [unit:Hz]", 1, 1, 20000, 1) );
STg = si.smoo( ba.db2linear( hslider("Sine Amp [unit:db]", -80, -80, 0, .001) ) );
STt = checkbox("Sine Signal");
TEST_Osc_variable = os.osc(STf) * STg * STt;
//process = TEST_Osc_variable;

TEST_12Micto1234Mics_Mixer = (_,_) : \(m1,m2).(m1, m2, m1, m2);
//process = TEST_12Micto1234Mics_Mixer;


// SINE OUTPUT / INPUT MICS LEVELS DETECT
// process = os.osc(1000), os.osc(1000), hmeter(0), hmeter(1)
// with {
// 	vmeter(i, x) = attach(x, envelop(x) : vbargraph("chan %i[2][unit:dB]", -70, +5));
// 	hmeter(i, x) = attach(x, envelop(x) : hbargraph("chan %i[2][unit:dB]", -70, +5));
// 	envelop = abs : max ~ -(1.0/ma.SR) : max(ba.db2linear(-70)) : ba.linear2db;
// };
